// import global rulers ... will be replace @use in newer versions
@import "./sass/layout/global-rulers";

// import pages
@import "./sass/pages/contact";

// import colors
@import "./sass/variables/colors";

// import helper mixins
@import "./sass/helpers/mixins";

// import functions from helper folder
@import "./sass/helpers/functions";

header {
  background-color: $main-clr;
  color: $alt-clr;
}

footer {
  $alt-clr: lightblue !global;
  background-color: $alt-clr;
}

.copyright {
  color: $alt-clr;
}

$max-mobile: "max-width: 767px";

@media ($max-mobile) {
  .sidebar {
    padding: 0.5rem;
  }
}

// Nesting And Parent Element
// --Pros: we do one combat block of code for parent

.parent {
  font-weight: bolder;
  .child {
    color: $main-clr;
    .grand-child {
      background-color: $alt-clr;
    }
  }
}

.parent-one,
.parent-two {
  padding: $padd;
  .child {
    padding: $padd / 2;
  }
}

// Direct Child .... .parent > div

.parent > {
  .child {
    font-size: 2px;
  }
  .text {
    font-size: 20px;
  }
}

.parent {
  > {
    .child {
      font-size: 2px;
    }
    .child-2 {
      font-size: 2px;
    }
  }
  .text {
    font-size: 20px;
  }
  + p {
    color: $main-clr;
  }
}

.box {
  .tile {
    color: blue;
  }
  .desc {
    font-weight: bold;
  }
  // refer to the parent itself
  //   .box.red
  &.red {
    color: red;
  }
  &:hover {
    background-color: #0ed10e;
  }

  [dir="rtl"] & {
    direction: rtl;
  }
}

// *********** Property Declarations And Placeholder

.property {
  background: {
    image: url(google.com);
    attachment: fixed;
  }
  font: {
    weight: bold;
  }
}

// placeholder class wont show in the actual main.css
%placeholder {
  background-color: #eee;
  padding: 15px;
  color: $main-clr;
}

article {
  @extend %placeholder;
  @extend .property;
  font-size: 23px;
}
section {
  margin: auto;
  @extend %placeholder;
}

//  Control Flow ==> If And Else

$theme: "light";

.page {
  @if ($theme == "light") {
    background-color: $alt-clr;
    color: rgb(116, 116, 116);
  } @else {
    background-color: black;
    color: white;
  }
}

$rounded: true;

.circle {
  border-radius: if($rounded, 50%, null);
}

.centtt {
  display: flex;
  justify-content: center;
  align-items: center;
}

// **********************************************************
// Create Triangle With If And Else

$dirr: "left";

.arrow-div {
  @extend %placeholder, .centtt;
  font-weight: bold;
  font-size: 20px;
  width: fit-content;
  margin: 10% auto;
  position: relative;
  &::before {
    content: "";
    position: absolute;
    border: 10px solid transparent;

    @if $dirr == "top" {
      border-bottom-color: $main-clr;
      top: -20px;
      left: 50%;
      transform: translateX(-50%);
    } @else if $dirr == "bottom" {
      border-top-color: $main-clr;
      bottom: -20px;
      left: 50%;
      transform: translateX(-50%);
    } @else if $dirr == "right" {
      border-left-color: $main-clr;
      right: -20px;
      top: 50%;
      transform: translateY(-50%);
    } @else if $dirr == "left" {
      border-right-color: $main-clr;
      left: -20px;
      top: 50%;
      transform: translateY(-50%);
    } @else {
      @error "This direction #{$dirr}is not valid";
    }
  }
}

// **********************************************************
// Interpolation

$company: "Fayy";
$position: "top";

.ads-#{$company} {
  background-image: url("imgs/#{$company}.png");
  #{$position}: 0;
}

.user-#{unique-id()} {
  color: plum;
}

// **********************************************************
// Comments

// This comment wont be shown in the css file

/* This one will be shown in the css file but not in the compressed one*/

/*! This one will be shown in the css file but not in the compressed one*/

/* you can use interpolation in the comment  ==> #{$company}*/

/// Documenting

/// Function To Do shit
///
/// @param {num}
/// Number of customers
/// @return {int}

// **********************************************************
// Mixin And Include

ul.links {
  @include list-reset;
}

.circle-100 {
  @include circle(100px);
  background-color: red;
  color: white;
}

.circle-200 {
  @include circle(200px);
  background-color: red;
  color: white;
}

.center-circle {
  @include centering;
  @include circle(400px);
}

// **********************************************************
// Loop => For

@for $i from 1 through 10 {
  .class-#{$i} {
    font-size: #{$i + 10px};
  }
}

$dimension: 0;

@for $i from 1 through 10 {
  .class-#{$dimension + 100} {
    height: $dimension + 100;
    width: $dimension + 100;
    @extend .circle;
  }

  $dimension: $dimension + 100;
}

// **********************************************************
// Each + Maps

$themes: red, green, blue, orange;

@each $theme in $themes {
  .#{$theme}-theme {
    .product {
      background-color: white;
      border-bottom: 2px solid $theme;
      .title {
        color: $theme;
        font-weight: bold;
      }
    }
  }
}

$socials: (
  "facebook": blue,
  "youtube": red,
  "github": black,
  "twitter": indianred,
);

@each $name, $color in $socials {
  .#{$name} {
    color: $color;
  }
}

$classes: "one" 25px pink, "two" 15px yellow,
  "three" 18px black;

@each $class, $font, $clr in $classes {
  .#{$class} {
    font-size: $font;
    color: $clr;
  }
}

// **********************************************************
/* Loop - While */

$start: 1;

@while $start <= 10 {
  .width-#{$start}00 {
    width: $start * 100px;
    height: $start * 50;
  }
  $start: $start + 1;
}

// **********************************************************
/* Create Bootstrap Grid System */

$grid-cols: 12;

@for $i from 1 through $grid-cols {
  .col-#{$i} {
    width: percentage($i / $grid-cols);
  }
}

// **********************************************************
/* Function */

$size: 200px;

.element {
  width: $size;
  height: half($size);
  top: calculate(200px, 12px, 215px);
}

// **********************************************************
/*  Practice Mixin With Content */

$overlay-clr: pink;

.#{$overlay-clr}-overlay {
  @include section-overlay($overlay-clr, 0.3);
}

@include keyF(fade-in) {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@include keyF(go-up) {
  from {
    bottom: 0;
  }
  to {
    bottom: 100px;
  }
}

.media {
  @include breakpoints(small) {
    font-size: 0.5rem;
  }
}
@include reset-all;
